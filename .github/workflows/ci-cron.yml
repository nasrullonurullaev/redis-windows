name: Cron Build Valkey (MSYS2)

on:
  schedule:
    - cron: '0 1 * * *'

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download source code
        run: |
          if ( -not ( Test-Path -Path .github\valkey_latest_version.txt )) { 
            Add-Content -Path .github\valkey_latest_version.txt -Value "" -NoNewline
          }
          $res = ConvertFrom-Json(Invoke-WebRequest -Headers @{'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}'} -Uri "https://api.github.com/repos/valkey-io/valkey/releases/latest").Content
          if ( $res.tag_name -eq ( Get-Content .github\valkey_latest_version.txt )) { 
            Write-Output "No new version"
            exit 1
          }
          $res.tag_name | Out-File -FilePath .github\valkey_latest_version.txt -NoNewline -Encoding ascii
          $res.body | Set-Content .\valkey_latest_body.txt
          Add-Content -Path $env:GITHUB_ENV -Value "RELEASE_VERSION=$($res.tag_name)"
          Add-Content -Path $env:GITHUB_ENV -Value "VALKEY_DIST=Valkey-$($res.tag_name)-Windows-x64"
          Invoke-WebRequest -Uri https://github.com/valkey-io/valkey/archive/refs/tags/$($res.tag_name).tar.gz -OutFile valkey-$($res.tag_name).tar.gz

      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: gcc make pkg-config libopenssl openssl-devel zip

      - name: Build Valkey with MSYS2
        if: ${{ success() }}
        run: |
          workspace=$(pwd)
          mkdir ${{ env.VALKEY_DIST }}-msys2
          sed -i 's/__GNU_VISIBLE/1/' /usr/include/dlfcn.h
          tar -xzf valkey-${{ env.RELEASE_VERSION }}.tar.gz
          cd valkey-${{ env.RELEASE_VERSION }}/src && ./mkreleasehdr.sh
          cd ..
          make BUILD_TLS=yes CFLAGS="-Wno-char-subscripts -O0"
          find . -mindepth 1 -maxdepth 2 -type f -regex '.*\(\.exe\|\.conf\)' -exec cp -f "{}" "$workspace/${{ env.VALKEY_DIST }}-msys2" \;
          cd $workspace
          cp README.md /usr/bin/msys-2.0.dll /usr/bin/msys-crypto-3.dll /usr/bin/msys-ssl-3.dll ${{ env.VALKEY_DIST }}-msys2
          sed -i 's/pidfile \/var\/run/pidfile ./' ${{ env.VALKEY_DIST }}-msys2/valkey.conf || true
          zip -q -r ${{ env.VALKEY_DIST }}-msys2.zip ${{ env.VALKEY_DIST }}-msys2
        shell: msys2 {0}

      - name: Verify version
        if: ${{ success() }}
        run: |
          if ( -not ( (./${{ env.VALKEY_DIST }}-msys2/valkey-server.exe --version ) -match "${{ env.RELEASE_VERSION }}" ) ) { 
            Write-Output "msys2 verification failed"
            exit 1
          }

      - name: Calculate hash
        if: ${{ success() }}
        run: |
          'Hashes' | Out-File -Append .\valkey_latest_body.txt
          '=========' | Out-File -Append .\valkey_latest_body.txt
          Get-FileHash .\${{ env.VALKEY_DIST }}-msys2.zip | Format-List | Out-File -Append .\valkey_latest_body.txt

      - name: Add from workflow
        if: ${{ success() }}
        run: |
          "From workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" | Out-File -Append .\valkey_latest_body.txt

      - name: Update valkey_latest_version.txt
        if: ${{ success() }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .github\valkey_latest_version.txt
          git commit -m "update valkey latest version"
          git push

      - name: Release
        if: ${{ success() }}
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Valkey ${{ env.RELEASE_VERSION }} for Windows
          tag_name: ${{ env.RELEASE_VERSION }}
          body_path: valkey_latest_body.txt
          make_latest: true
          files: |
            ${{ env.VALKEY_DIST }}-msys2.zip
